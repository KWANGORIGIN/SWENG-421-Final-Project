package mainPackage;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import javax.imageio.ImageIO;
import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;

/**
 *
 * @author Kevin Wang
 */
public class OscilloscopeWindow extends JFrame implements ObserverIF{
    protected volatile static WaveIF sharedWave;
    protected WaveIF localWave;
    protected CompositeWave compositeWave;
    protected WaveIF savedWave;
    protected WaveDecorator attributeWave;
    private final Object updateLock = new Object();
    private boolean saveImage = true;

    /**
     * Creates new form OscilloscopeWindow
     */
    public OscilloscopeWindow() {
        initComponents();
        this.setSize(1025, 500);
        if(sharedWave == null){
            sharedWave = new SineWave();
        }
        localWave = new SineWave();
        this.compositeWave = new CompositeWave();
        viewerPanel.setWave(localWave);
       // savedWave = new SineWave();

        this.updateAmpOutput(localWave.getArg("Amplitude").toString());
        this.updateFreqOutput(localWave.getArg("Frequency").toString());
        this.updateHorizOutput(localWave.getArg("Horizontal Shift").toString());
        this.updateVertOutput(localWave.getArg("Vertical Shift").toString());
        this.updateScaleOutput(localWave.getArg("Scale").toString());

        compositeToggleButton.setEnabled(false);
        resetCompositeButton.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewerPanel = new WavePanel();
        amplitudeSlider = new JSlider(0, 100, 0);
        frequencySlider = new JSlider(0, 100, 0);
        horizontalSlider = new JSlider(-50, 50, 0);
        verticalSlider = new JSlider(-50, 50, 0);
        amplitudeTextfield = new JTextField();
        frequencyTextfield = new JTextField();
        verticalTextfield = new JTextField();
        sineButton = new JButton();
        cosineButton = new JButton();
        amplitudeCheckbox = new JCheckBox();
        amplitudeLabel = new JLabel();
        scalingSlider = new JSlider(0, 250, 42);
        scalingTextfield = new JTextField();
        horizontalTextfield = new JTextField();
        frequencyLabel = new JLabel();
        horizontalShiftLabel = new JLabel();
        verticalShiftLabel = new JLabel();
        scalingLabel = new JLabel();
        observeLabel = new JLabel();
        frequencyCheckbox = new JCheckBox();
        parametersLabel = new JLabel();
        titleLabel = new JLabel();
        saveImageButton = new JButton();
        addToCompositeButton = new JButton();
        compositeToggleButton = new JToggleButton();
        resetCompositeButton = new JButton();
        ppAmplitudeToggleButton = new JToggleButton();
        showWavelengthButton = new JToggleButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 778, 436));
        setMaximumSize(new java.awt.Dimension(778, 436));
        setResizable(false);
        setSize(new java.awt.Dimension(778, 436));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        viewerPanel.setBackground(new java.awt.Color(255, 255, 255));
        viewerPanel.setPreferredSize(new java.awt.Dimension(420, 300));

        GroupLayout viewerPanelLayout = new GroupLayout(viewerPanel);
        viewerPanel.setLayout(viewerPanelLayout);
        viewerPanelLayout.setHorizontalGroup(
            viewerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );
        viewerPanelLayout.setVerticalGroup(
            viewerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        amplitudeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                amplitudeSliderStateChanged(evt);
            }
        });

        frequencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                frequencySliderStateChanged(evt);
            }
        });

        horizontalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                horizontalSliderStateChanged(evt);
            }
        });

        verticalSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                verticalSliderStateChanged(evt);
            }
        });

        sineButton.setText("Sine Wave");
        sineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sineButtonActionPerformed(evt);
            }
        });

        cosineButton.setText("Cosine Wave");
        cosineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosineButtonActionPerformed(evt);
            }
        });

        amplitudeCheckbox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        amplitudeCheckbox.setText("Observe Amplitude");
        amplitudeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amplitudeCheckboxActionPerformed(evt);
            }
        });

        amplitudeLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        amplitudeLabel.setText("Amplitude");

        scalingSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scalingSliderStateChanged(evt);
            }
        });

        horizontalTextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalTextfieldActionPerformed(evt);
            }
        });

        frequencyLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        frequencyLabel.setText("Frequency");

        horizontalShiftLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        horizontalShiftLabel.setText("Horizontal Shift");

        verticalShiftLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        verticalShiftLabel.setText("Vertical Shift");

        scalingLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        scalingLabel.setText("Scaling");

        observeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        observeLabel.setText("Observe:");

        frequencyCheckbox.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        frequencyCheckbox.setText("Observe Frequency");
        frequencyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyCheckboxActionPerformed(evt);
            }
        });

        parametersLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        parametersLabel.setText("Parameters:");

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel.setHorizontalAlignment(SwingConstants.LEFT);
        titleLabel.setText("Oscilloscope Viewer created by William Hemminger and Kevin Wang");

        saveImageButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        saveImageButton.setText("SAVE IMAGE");
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });

        addToCompositeButton.setText("Add to Composite");
        addToCompositeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCompositeButtonActionPerformed(evt);
            }
        });

        compositeToggleButton.setText("Show Composite Wave");
        compositeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compositeToggleButtonActionPerformed(evt);
            }
        });

        resetCompositeButton.setText("Reset Composite Wave");
        resetCompositeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCompositeButtonActionPerformed(evt);
            }
        });

        ppAmplitudeToggleButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ppAmplitudeToggleButton.setText("Show Peak to Peak Amplitude");
        ppAmplitudeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ppAmplitudeToggleButtonActionPerformed(evt);
            }
        });

        showWavelengthButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        showWavelengthButton.setText("Show Wavelength");
        showWavelengthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showWavelengthButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(viewerPanel, GroupLayout.PREFERRED_SIZE, 442, GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showWavelengthButton, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ppAmplitudeToggleButton, GroupLayout.PREFERRED_SIZE, 224, GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(amplitudeSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(amplitudeTextfield, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(amplitudeLabel, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(frequencySlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(frequencyTextfield, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(frequencyLabel, GroupLayout.PREFERRED_SIZE, 82, GroupLayout.PREFERRED_SIZE))
                            .addComponent(parametersLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(observeLabel)
                            .addComponent(frequencyCheckbox)
                            .addComponent(amplitudeCheckbox))
                        .addGap(36, 36, 36))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(cosineButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sineButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(addToCompositeButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(compositeToggleButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(scalingSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(scalingTextfield, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(scalingLabel, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(horizontalSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(horizontalTextfield, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(horizontalShiftLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(verticalSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(verticalTextfield, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(verticalShiftLabel, GroupLayout.PREFERRED_SIZE, 76, GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveImageButton, GroupLayout.PREFERRED_SIZE, 334, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetCompositeButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(parametersLabel)
                            .addComponent(observeLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(titleLabel, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(viewerPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(amplitudeSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(amplitudeTextfield, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(amplitudeLabel, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                .addComponent(amplitudeCheckbox)))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(frequencySlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(frequencyTextfield, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(frequencyLabel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                .addComponent(frequencyCheckbox)))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(horizontalSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(horizontalTextfield, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(verticalSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(verticalTextfield, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(verticalShiftLabel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addComponent(scalingSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(scalingTextfield, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(scalingLabel, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
                            .addComponent(horizontalShiftLabel, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(sineButton, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addToCompositeButton, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(cosineButton, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
                            .addComponent(compositeToggleButton, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveImageButton, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(ppAmplitudeToggleButton)
                        .addComponent(showWavelengthButton))
                    .addComponent(resetCompositeButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void horizontalTextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalTextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horizontalTextfieldActionPerformed

    private WaveArgIF createArg(String type, String className, double value, boolean checkmark){
        WaveArgIF arg = null;
        try {
            Class<?> c = Class.forName("mainPackage." + className);
            Constructor<?> construct = c.getConstructor(double.class);
            arg = (WaveArgIF) construct.newInstance(value);
        } catch (ClassNotFoundException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {
            System.out.println("Failed to create arg " + className + "...");
            e.printStackTrace();
        }


        if(checkmark){
            arg.setShared();
            sharedWave.changeArg(arg);
        }
        return arg;
    }

    private void amplitudeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amplitudeSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider) evt.getSource();
        AmpArg arg = (AmpArg) createArg("Amplitude", "AmpArg", source.getValue() / 10.0, amplitudeCheckbox.isSelected());
        this.updateAmpOutput(arg.toString());

        if(!source.getValueIsAdjusting()){
            paintWithWorker(arg);
        }
    }//GEN-LAST:event_amplitudeSliderStateChanged

    private void frequencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_frequencySliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider) evt.getSource();
        FreqArg arg = (FreqArg) createArg("Frequency", "FreqArg", source.getValue(), frequencyCheckbox.isSelected());
        this.updateFreqOutput(arg.toString());

        if(!source.getValueIsAdjusting()){
            paintWithWorker(arg);
        }
    }//GEN-LAST:event_frequencySliderStateChanged

    private void horizontalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_horizontalSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider) evt.getSource();
        HorizArg arg = new HorizArg(source.getValue()  * (421 / (double) (100) * localWave.getData().get("Scale").getValue()));
        this.updateHorizOutput(arg.toString());

        if(!source.getValueIsAdjusting()){
            paintWithWorker(arg);
        }
    }//GEN-LAST:event_horizontalSliderStateChanged

    private void verticalSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_verticalSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider) evt.getSource();
        VertArg arg = new VertArg(source.getValue() * (301 / (double) 100 * localWave.getData().get("Scale").getValue()));

        this.updateVertOutput(arg.toString());

        if(!source.getValueIsAdjusting()){
            paintWithWorker(arg);
        }
    }//GEN-LAST:event_verticalSliderStateChanged

    private void scalingSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scalingSliderStateChanged
        // TODO add your handling code here:
        JSlider source = (JSlider) evt.getSource();
        ScaleArg arg = new ScaleArg((source.getValue() * 0.0001)  * (1000.0 / 301));
        this.updateScaleOutput(arg.toString());

        if(!source.getValueIsAdjusting()){
            paintWithWorker(arg);
        }
    }//GEN-LAST:event_scalingSliderStateChanged

    private void sineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sineButtonActionPerformed
        // TODO add your handling code here:

            //this.savedWave = (WaveIF) this.localWave.cloneWave();
            this.localWave = new SineWave();
            this.resetControls();

            if(this.showWavelengthButton.isSelected())
            {
                this.localWave = new WaveDecorator(new Wavelength(), localWave);
            }

            if(this.ppAmplitudeToggleButton.isSelected())
            {
                this.localWave = new WaveDecorator(new PPAmplitude(), localWave);
            }
            this.viewerPanel.setWave(this.localWave);
            viewerPanel.repaint();


    }//GEN-LAST:event_sineButtonActionPerformed

    private void cosineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosineButtonActionPerformed
        // TODO add your handling code here:
        //this.savedWave = (WaveIF) this.localWave.cloneWave();
        this.localWave = new CosineWave();
        this.resetControls();

        if(this.showWavelengthButton.isSelected())
        {
            this.localWave = new WaveDecorator(new Wavelength(), localWave);
        }

        if(this.ppAmplitudeToggleButton.isSelected())
        {
            this.localWave = new WaveDecorator(new PPAmplitude(), localWave);
        }

        this.viewerPanel.setWave(this.localWave);
        viewerPanel.repaint();

    }//GEN-LAST:event_cosineButtonActionPerformed

    private void amplitudeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amplitudeCheckboxActionPerformed
        // TODO add your handling code here:
        WaveArgIF arg = sharedWave.getArg("Amplitude");
        if(amplitudeCheckbox.isSelected()){
            arg.addObserver(this);

            if(arg.getValue() != 0){
                this.updateAmpOutput(arg.toString());
                amplitudeSlider.setValue((int) (arg.getValue() * 10));
                localWave.plotWave(arg);
                viewerPanel.repaint();
            }
        }
        else{
            arg.removeObserver(this);
        }
    }//GEN-LAST:event_amplitudeCheckboxActionPerformed

    private void frequencyCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyCheckboxActionPerformed
        // TODO add your handling code here:
        WaveArgIF arg = sharedWave.getArg("Frequency");
        if(frequencyCheckbox.isSelected()){
            arg.addObserver(this);

            if(arg.getValue() != 0){
                this.updateFreqOutput(arg.toString());
                frequencySlider.setValue((int) arg.getValue());
                localWave.plotWave(arg);
                viewerPanel.repaint();
            }
        }
        else{
            arg.removeObserver(this);
        }
    }//GEN-LAST:event_frequencyCheckboxActionPerformed

    public void saveImage(){
        if(!saveImage)
        {
            return;
        }

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss");
        LocalDateTime now = LocalDateTime.now();
        File outputFile = new File("wave" + dtf.format(now) + ".png");
        if(compositeToggleButton.isSelected()){
            try{
                ImageIO.write(compositeWave.getWaveImage(), "png", outputFile);
            }catch(IOException e){
                System.out.println("Failed to save image...");
            }
        }
        else{
            try{
                ImageIO.write(localWave.getWaveImage(), "png", outputFile);
            }catch(IOException e){
                System.out.println("Failed to save image...");
            }
        }
    }

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        // TODO add your handling code here:
        saveImage();
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void addToCompositeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCompositeButtonActionPerformed
        // TODO add your handling code here:
        this.compositeWave.addWave(localWave.cloneWave());
        this.enableCompositeToggle();
        this.resetCompositeButton.setEnabled(true);


    }//GEN-LAST:event_addToCompositeButtonActionPerformed

    private void compositeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compositeToggleButtonActionPerformed
        // TODO add your handling code here:
        if(compositeToggleButton.isSelected())
        {
            //this.savedWave = (WaveIF) this.localWave.cloneWave();
            this.localWave = this.compositeWave;
            this.addToCompositeButton.setEnabled(false);
            this.ppAmplitudeToggleButton.setEnabled(false);
            this.showWavelengthButton.setEnabled(false);
        }
        else
        {
            this.localWave = this.compositeWave.getLast().cloneWave();
            this.addToCompositeButton.setEnabled(true);
            enableDecorators();
        }
        this.viewerPanel.setWave(this.localWave);
        viewerPanel.repaint();


    }//GEN-LAST:event_compositeToggleButtonActionPerformed

    private void resetCompositeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCompositeButtonActionPerformed
        // TODO add your handling code here:
        this.localWave = this.compositeWave.getLast().cloneWave();
        this.addToCompositeButton.setEnabled(true);
        this.compositeToggleButton.setEnabled(false);
        this.resetCompositeButton.setEnabled(false);
        this.compositeWave.clear();
        this.viewerPanel.setWave(this.localWave);
        viewerPanel.repaint();

        this.enableDecorators();

    }//GEN-LAST:event_resetCompositeButtonActionPerformed

    private void ppAmplitudeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppAmplitudeToggleButtonActionPerformed
        // TODO add your handling code here:
        if(ppAmplitudeToggleButton.isSelected())
        {
            this.addToCompositeButton.setEnabled(false);
            this.compositeToggleButton.setEnabled(false);
            this.localWave = new WaveDecorator(new PPAmplitude(), localWave);
            viewerPanel.setWave(localWave);
            viewerPanel.repaint();
        }
        else
        {
            this.localWave = ((WaveDecorator) localWave).rewrap("PPAmp");
            viewerPanel.setWave(localWave);
            viewerPanel.repaint();

            if(!(localWave instanceof WaveDecorator))
            {
                this.addToCompositeButton.setEnabled(true);
                this.enableCompositeToggle();
            }
        }
    }//GEN-LAST:event_ppAmplitudeToggleButtonActionPerformed

    private void showWavelengthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showWavelengthButtonActionPerformed
        // TODO add your handling code here:

        if(showWavelengthButton.isSelected())
        {
            this.addToCompositeButton.setEnabled(false);
            this.compositeToggleButton.setEnabled(false);
            this.localWave = new WaveDecorator(new Wavelength(), localWave);
            viewerPanel.setWave(localWave);
            viewerPanel.repaint();
        }
        else
        {

            this.localWave = ((WaveDecorator) localWave).rewrap("Wavelength");
            viewerPanel.setWave(localWave);
            viewerPanel.repaint();

            if(!(localWave instanceof WaveDecorator))
            {
                this.addToCompositeButton.setEnabled(true);
                this.enableCompositeToggle();
            }
        }


    }//GEN-LAST:event_showWavelengthButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.saveImage = false;

    }//GEN-LAST:event_formWindowClosing

    public void paintWithWorker(WaveArgIF arg){
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                localWave.plotWave(arg);

                if(arg instanceof ScaleArg)
                {
                    for(int i = 0; i < compositeWave.getWaves().size(); i++)
                    {
                        compositeWave.getWaves().get(i).plotWave(arg);
                    }
                }
                return null;
            }

            @Override
            protected void done(){
                viewerPanel.repaint();
            }
        };
        worker.execute();
    }

    @Override
    public void update(WaveArgIF argChanged) {
        String type = argChanged.getType();
        if(type.equals("Amplitude")){
            this.updateAmpOutput(argChanged.toString());
            amplitudeSlider.setValue((int) (argChanged.getValue() * 10));
        }
        else if(type.equals("Frequency")){
            this.updateFreqOutput(argChanged.toString());
            frequencySlider.setValue((int) argChanged.getValue());
        }

        localWave.plotWave(argChanged);
        viewerPanel.repaint();
    }

    public void updateAmpOutput(String a)
    {
        synchronized(updateLock)
        {
            this.amplitudeTextfield.setText(a);
        }

    }

    public void updateFreqOutput(String f)
    {
        synchronized(updateLock)
        {
            this.frequencyTextfield.setText(f);
        }

    }

    public void updateHorizOutput(String h)
    {
        synchronized(updateLock)
        {
            this.horizontalTextfield.setText(h);
        }

    }

    public void updateVertOutput(String v)
    {
        synchronized(updateLock)
        {
            this.verticalTextfield.setText(v);
        }

    }

    public void updateScaleOutput(String s)
    {
        synchronized(updateLock)
        {
            this.scalingTextfield.setText(s);
        }

    }

    public void enableCompositeToggle()
    {
        if(!this.compositeWave.getWaves().isEmpty() && !(this.showWavelengthButton.isSelected()) && !(this.ppAmplitudeToggleButton.isSelected()))
        {
            this.compositeToggleButton.setEnabled(true);
        }
    }

    public void enableDecorators()
    {
        this.showWavelengthButton.setEnabled(true);
        this.ppAmplitudeToggleButton.setEnabled(true);

    }
    public void resetControls()
    {
        this.updateAmpOutput(this.localWave.getArg("Amplitude").toString());
        this.updateFreqOutput(this.localWave.getArg("Frequency").toString());
        this.updateHorizOutput(this.localWave.getArg("Horizontal Shift").toString());
        this.updateVertOutput(this.localWave.getArg("Vertical Shift").toString());
        this.updateScaleOutput(this.localWave.getArg("Scale").toString());

        this.amplitudeSlider.setValue((int) this.localWave.getArg("Amplitude").getValue() * 10);
        this.frequencySlider.setValue((int) this.localWave.getArg("Frequency").getValue());
        this.horizontalSlider.setValue((int) (this.localWave.getArg("Horizontal Shift").getValue() / (421 / (double) (100) * localWave.getData().get("Scale").getValue())));
        this.verticalSlider.setValue((int) (this.localWave.getArg("Vertical Shift").getValue() / (301 / (double) 100 * localWave.getData().get("Scale").getValue())));
        this.scalingSlider.setValue((int) (this.localWave.getArg("Scale").getValue() / (0.0001)  / (1000.0 / 301)));


        this.enableDecorators();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OscilloscopeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OscilloscopeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OscilloscopeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OscilloscopeWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OscilloscopeWindow().setVisible(true);
            }
        });


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton addToCompositeButton;
    private JCheckBox amplitudeCheckbox;
    private JLabel amplitudeLabel;
    private JSlider amplitudeSlider;
    private JTextField amplitudeTextfield;
    private JToggleButton compositeToggleButton;
    private JButton cosineButton;
    private JCheckBox frequencyCheckbox;
    private JLabel frequencyLabel;
    private JSlider frequencySlider;
    private JTextField frequencyTextfield;
    private JLabel horizontalShiftLabel;
    private JSlider horizontalSlider;
    private JTextField horizontalTextfield;
    private JLabel observeLabel;
    private JLabel parametersLabel;
    private JToggleButton ppAmplitudeToggleButton;
    private JButton resetCompositeButton;
    private JButton saveImageButton;
    private JLabel scalingLabel;
    private JSlider scalingSlider;
    private JTextField scalingTextfield;
    private JToggleButton showWavelengthButton;
    private JButton sineButton;
    private JLabel titleLabel;
    private JLabel verticalShiftLabel;
    private JSlider verticalSlider;
    private JTextField verticalTextfield;
    private WavePanel viewerPanel;
    // End of variables declaration//GEN-END:variables

}
